{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js.pre-build-optimizer.js","webpack:///src/app/shared/copier.service.ts","webpack:///src/app/custom-elements/code/code.component.ts","webpack:///src/app/custom-elements/code/code.component.ts.pre-build-optimizer.js","webpack:///src/app/custom-elements/code/code.module.ts","webpack:///src/app/custom-elements/code/code.module.ts.pre-build-optimizer.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js.pre-build-optimizer.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skip.js.pre-build-optimizer.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js.pre-build-optimizer.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js.pre-build-optimizer.js","webpack:///src/app/custom-elements/code/pretty-printer.service.ts","webpack:///src/app/custom-elements/code/pretty-printer.service.ts.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","CdkPortalOutlet","PortalHostDirective","PortalModule","PortalInjector","_angular_core__WEBPACK_IMPORTED_MODULE_0__","throwPortalAlreadyAttachedError","Error","Portal","[object Object]","host","hasAttached","this","_attachedHost","attach","detach","isAttached","component","viewContainerRef","injector","componentFactoryResolver","super","template","context","templateRef","origin","elementRef","undefined","_isDisposed","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentFactory","resolveComponentFactory","componentRef","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","dispose","parentNode","removeChild","ɵfac","t","Pb","L","O","ɵdir","Kb","type","selectors","exportAs","features","xb","_viewContainerRef","_isInitialized","attached","m","attachedRef","_attachedRef","ref","emit","clear","j","inputs","outputs","ɵPortalHostDirective_BaseFactory","zb","provide","useExisting","Xb","ɵmod","Nb","ɵinj","Mb","factory","_parentInjector","_customTokens","token","notFoundValue","value","get","CopierService","text","docElem","document","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","body","select","setSelectionRange","createFake","execCommand","err","removeFake","CodeComponent","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__","_pretty_printer_service__WEBPACK_IMPORTED_MODULE_3__","app_shared_copier_service__WEBPACK_IMPORTED_MODULE_4__","app_shared_logger_service__WEBPACK_IMPORTED_MODULE_5__","_angular_common__WEBPACK_IMPORTED_MODULE_6__","_c0","CodeComponent_button_2_Template","rf","ctx","_r106","Wb","Vb","dc","$event","vc","hc","doCopy","Gc","Tb","ctx_r103","Cb","ariaLabel","snackbar","pretty","copier","logger","codeFormatted","code","_code","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","leftAlignedCode","indent","Number","MAX_VALUE","lines","split","line","lineIndent","search","Math","min","map","substr","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","Object","a","subscribe","c","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","copyText","log","open","duration","error","linenums","parseInt","isNaN","ɵcmp","Jb","viewQuery","_t","Ac","rc","ec","first","hideCopy","yb","decls","vars","consts","Ec","Qb","Eb","Ab","mc","directives","k","encapsulation","CodeModule","_angular_common__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","providers","imports","b","overlay_BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coercion","classList","add","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","core","Zb","scrolling","e","y","common","ɵprov","Lb","providedIn","ngInjectableDef","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","key","ConnectionPositionPair","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","push","splice","removeEventListener","OverlayContainer","_containerElement","_createContainer","previousContainers","getElementsByClassName","container","overlay_OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","Observable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","timeoutId","backdropToDetach","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","takeUntil","merge","children","boundingBoxClass","overlay_FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","overlayStartX","overlayStartY","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getConfig","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","transform","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","HTMLElement","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","overlay_OverlayContainer","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","g","fesm2015_portal","overlay_ScrollStrategyOptions","overlay_OverlayPositionBuilder","overlay_OverlayKeyboardDispatcher","q","bidi","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","p","deps","overlay_Overlay","useFactory","OverlayModule","h","SkipOperator","total","subscriber","skip_SkipSubscriber","Subscriber","destination","count","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","head","sheet","insertRule","console","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","splitQueries","mediaQuery","_registerQuery","mql","observables","observable","stateObservable","combineLatest","concat","lift","debounceTime","breakpointStates","response","breakpoints","state","output","handler","startWith","nextMql","set","layout_MediaMatcher","queries","a1","a2","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","snack_bar_MatSnackBarModule","snack_bar_MatSnackBar","SimpleSnackBar_div_2_Template","_r13","action","ctx_r11","Hc","data","_c1","MatSnackBarContainer_ng_template_0_Template","snack_bar_MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","dismissedByAction","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","hasAction","hostBindings","elIndex","Ub","message","fesm2015_button","changeDetection","matSnackBarAnimations","snackBarState","animations","opacity","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_role","_assertNotAttached","_applySnackBarClasses","fromState","toState","_completeExit","onEnter","onMicrotaskEmpty","panelClasses","Array","isArray","Bb","Gb","onAnimationEnd","Kc","animation","MatSnackBarModule","overlay_OverlayModule","fesm2015_core","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","_attach","openFromComponent","snack_bar_SimpleSnackBar","WeakMap","containerPortal","snack_bar_MatSnackBarContainer","containerRef","instance","content","userConfig","_createOverlay","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","global","isLeft","isRight","centerHorizontally","a11y","f","layout_BreakpointObserver","n","PrettyPrinter","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","prettyPrintOne","getPrettyPrintOne","ppo","Promise","resolve","then","msg"],"mappings":"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","file":"default~code-code-example-module~code-code-tabs-module-es2015.0505c97337992be629ea.js","sourcesContent":["import { Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Output, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface that can be used to generically type a class.\n * @record\n * @template T\n */\nfunction ComponentType() { }\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Portal.prototype._attachedHost;\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\nif (false) {\n    /**\n     * The type of the component that will be instantiated for attachment.\n     * @type {?}\n     */\n    ComponentPortal.prototype.component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     * @type {?}\n     */\n    ComponentPortal.prototype.viewContainerRef;\n    /**\n     * [Optional] Injector used for the instantiation of the component.\n     * @type {?}\n     */\n    ComponentPortal.prototype.injector;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * Defaults to using the resolver from the outlet that the portal is attached to.\n     * @type {?}\n     */\n    ComponentPortal.prototype.componentFactoryResolver;\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\nif (false) {\n    /**\n     * The embedded template that will be used to instantiate an embedded View in the host.\n     * @type {?}\n     */\n    TemplatePortal.prototype.templateRef;\n    /**\n     * Reference to the ViewContainer into which the template will be stamped out.\n     * @type {?}\n     */\n    TemplatePortal.prototype.viewContainerRef;\n    /**\n     * Contextual data to be passed in to the embedded view.\n     * @type {?}\n     */\n    TemplatePortal.prototype.context;\n}\n/**\n * A `PortalOutlet` is an space that can contain a single `Portal`.\n * @record\n */\nfunction PortalOutlet() { }\nif (false) {\n    /**\n     * Attaches a portal to this outlet.\n     * @param {?} portal\n     * @return {?}\n     */\n    PortalOutlet.prototype.attach = function (portal) { };\n    /**\n     * Detaches the currently attached portal from this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.detach = function () { };\n    /**\n     * Performs cleanup before the outlet is destroyed.\n     * @return {?}\n     */\n    PortalOutlet.prototype.dispose = function () { };\n    /**\n     * Whether there is currently a portal attached to this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.hasAttached = function () { };\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * The portal currently attached to the host.\n     * @type {?}\n     * @protected\n     */\n    BasePortalOutlet.prototype._attachedPortal;\n    /**\n     * A function that will permanently dispose this host.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._disposeFn;\n    /**\n     * Whether this host has already been permanently disposed.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._isDisposed;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachComponentPortal = function (portal) { };\n    /**\n     * @abstract\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachTemplatePortal = function (portal) { };\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * \\@breaking-change 9.0.0\n * @abstract\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => componentRef.destroy()));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        rootNode => this.outletElement.appendChild(rootNode)));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    }\n}\nif (false) {\n    /**\n     * Element into which the content is projected.\n     * @type {?}\n     */\n    DomPortalOutlet.prototype.outletElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._defaultInjector;\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * @deprecated Use `CdkPortal` instead.\n * \\@breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => ref.destroy()));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => this._viewContainerRef.clear()));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }]; }, { attached: [{\n            type: Output\n        }] }); })();\nif (false) {\n    /**\n     * Whether the portal component is initialized.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._isInitialized;\n    /**\n     * Reference to the currently-attached component/view ref.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._attachedRef;\n    /**\n     * Emits when a portal is attached to the outlet.\n     * @type {?}\n     */\n    CdkPortalOutlet.prototype.attached;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._viewContainerRef;\n}\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\nclass PortalModule {\n}\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective], exports: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._parentInjector;\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._customTokens;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector };\n\n//# sourceMappingURL=portal.js.map","/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const docElem = document.documentElement!;\n      const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || docElem.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | undefined;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string | undefined;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | undefined) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string|undefined { return this._header; }\n  private _header: string | undefined;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums())\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), () => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums() {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    return (linenums != null) && !isNaN(linenums as number) && linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"./pretty-printer.service\";\nimport * as i3 from \"app/shared/copier.service\";\nimport * as i4 from \"app/shared/logger.service\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = [\"codeContainer\"];\nfunction CodeComponent_button_2_Template(rf, ctx) { if (rf & 1) {\n    const _r106 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CodeComponent_button_2_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r106); const ctx_r105 = i0.ɵɵnextContext(); return ctx_r105.doCopy(); });\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtext(3, \"content_copy\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n      \");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r103 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-label\", ctx_r103.ariaLabel);\n} }\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\nexport class CodeComponent {\n    constructor(snackbar, pretty, copier, logger) {\n        this.snackbar = snackbar;\n        this.pretty = pretty;\n        this.copier = copier;\n        this.logger = logger;\n        this.ariaLabel = '';\n        this.codeFormatted = new EventEmitter();\n    }\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code) {\n        this._code = code;\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        }\n        else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code() { return this._code; }\n    /** Optional header to be displayed above the code. */\n    set header(header) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header() { return this._header; }\n    ngOnChanges() {\n        // If some inputs have changed and there is code displayed, update the view with the latest\n        // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n    formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n        this.pretty\n            .formatCode(leftAlignedCode, this.language, this.getLinenums())\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(c => this.setCodeHtml(c), () => { });\n    }\n    /** Sets the message showing that the code could not be found. */\n    showMissingCodeMessage() {\n        const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n    }\n    /** Sets the innerHTML of the code container to the provided code string. */\n    setCodeHtml(formattedCode) {\n        // **Security:** Code example content is provided by docs authors and as such its considered to\n        // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n    /** Gets the textContent of the displayed code element. */\n    getCodeText() {\n        // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n        // container as text, before prettifying it.\n        // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        }\n        else {\n            this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n            this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n        }\n    }\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums() {\n        const linenums = typeof this.linenums === 'boolean' ? this.linenums :\n            this.linenums === 'true' ? true :\n                this.linenums === 'false' ? false :\n                    typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n                        this.linenums;\n        return (linenums != null) && !isNaN(linenums) && linenums;\n    }\n}\nCodeComponent.ɵfac = function CodeComponent_Factory(t) { return new (t || CodeComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.PrettyPrinter), i0.ɵɵdirectiveInject(i3.CopierService), i0.ɵɵdirectiveInject(i4.Logger)); };\nCodeComponent.ɵcmp = i0.ɵɵdefineComponent({ type: CodeComponent, selectors: [[\"aio-code\"]], viewQuery: function CodeComponent_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.codeContainer = _t.first);\n    } }, inputs: { hideCopy: \"hideCopy\", language: \"language\", linenums: \"linenums\", path: \"path\", region: \"region\", header: \"header\" }, outputs: { codeFormatted: \"codeFormatted\" }, features: [i0.ɵɵNgOnChangesFeature()], decls: 7, vars: 4, consts: [[\"class\", \"material-icons copy-button no-print\", \"title\", \"Copy code snippet\", 3, \"click\", 4, \"ngIf\"], [1, \"animated\", \"fadeIn\"], [\"codeContainer\", \"\"], [\"title\", \"Copy code snippet\", 1, \"material-icons\", \"copy-button\", \"no-print\", 3, \"click\"], [\"aria-hidden\", \"true\"]], template: function CodeComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"pre\");\n        i0.ɵɵtext(1, \"      \");\n        i0.ɵɵtemplate(2, CodeComponent_button_2_Template, 5, 1, \"button\", 0);\n        i0.ɵɵtext(3, \"\\n      \");\n        i0.ɵɵelement(4, \"code\", 1, 2);\n        i0.ɵɵtext(6, \"\\n    \");\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"prettyprint lang-\", ctx.language, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideCopy);\n    } }, directives: [i5.NgIf], encapsulation: 2 });\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(CodeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aio-code',\n                template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n            }]\n    }], function () { return [{ type: i1.MatSnackBar }, { type: i2.PrettyPrinter }, { type: i3.CopierService }, { type: i4.Logger }]; }, { hideCopy: [{\n            type: Input\n        }], language: [{\n            type: Input\n        }], linenums: [{\n            type: Input\n        }], path: [{\n            type: Input\n        }], region: [{\n            type: Input\n        }], header: [{\n            type: Input\n        }], codeFormatted: [{\n            type: Output\n        }], codeContainer: [{\n            type: ViewChild,\n            args: ['codeContainer', { static: true }]\n        }] }); })();\nfunction leftAlign(text) {\n    let indent = Number.MAX_VALUE;\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n    return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport * as i0 from \"@angular/core\";\nexport class CodeModule {\n}\nCodeModule.ɵmod = i0.ɵɵdefineNgModule({ type: CodeModule });\nCodeModule.ɵinj = i0.ɵɵdefineInjector({ factory: function CodeModule_Factory(t) { return new (t || CodeModule)(); }, providers: [PrettyPrinter, CopierService], imports: [[CommonModule, MatSnackBarModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(CodeModule, { declarations: [CodeComponent], imports: [CommonModule, MatSnackBarModule], exports: [CodeComponent] }); })();\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(CodeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatSnackBarModule],\n                declarations: [CodeComponent],\n                entryComponents: [CodeComponent],\n                exports: [CodeComponent],\n                providers: [PrettyPrinter, CopierService]\n            }]\n    }], null, null); })();\n","import { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = (/** @type {?} */ (this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = (/** @type {?} */ (this._document.documentElement));\n            /** @type {?} */\n            const body = (/** @type {?} */ (this._document.body));\n            /** @type {?} */\n            const htmlStyle = (/** @type {?} */ (html.style));\n            /** @type {?} */\n            const bodyStyle = (/** @type {?} */ (body.style));\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        /** @type {?} */\n        const html = (/** @type {?} */ (this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._previousHTMLStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._previousScrollPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._isEnabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n * @record\n */\nfunction ScrollStrategy() { }\nif (false) {\n    /**\n     * Enable this scroll strategy (called when the attached overlay is attached to a portal).\n     * @type {?}\n     */\n    ScrollStrategy.prototype.enable;\n    /**\n     * Disable this scroll strategy (called when the attached overlay is detached from a portal).\n     * @type {?}\n     */\n    ScrollStrategy.prototype.disable;\n    /**\n     * Attaches this `ScrollStrategy` to an overlay.\n     * @type {?}\n     */\n    ScrollStrategy.prototype.attach;\n    /**\n     * Detaches the scroll strategy from the current overlay.\n     * @type {?|undefined}\n     */\n    ScrollStrategy.prototype.detach;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config options for the CloseScrollStrategy.\n * @record\n */\nfunction CloseScrollStrategyConfig() { }\nif (false) {\n    /**\n     * Amount of pixels the user has to scroll before the overlay is closed.\n     * @type {?|undefined}\n     */\n    CloseScrollStrategyConfig.prototype.threshold;\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = (/**\n         * @return {?}\n         */\n        () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this._overlayRef.detach()));\n            }\n        });\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            }));\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._scrollSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._initialScrollPosition;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._detach;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} containerBounds\n     * @return {?}\n     */\n    containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    }));\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} scrollContainerRect\n     * @return {?}\n     */\n    scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config options for the RepositionScrollStrategy.\n * @record\n */\nfunction RepositionScrollStrategyConfig() { }\nif (false) {\n    /**\n     * Time in milliseconds to throttle the scroll events.\n     * @type {?|undefined}\n     */\n    RepositionScrollStrategyConfig.prototype.scrollThrottle;\n    /**\n     * Whether to close the overlay once the user has scrolled away completely.\n     * @type {?|undefined}\n     */\n    RepositionScrollStrategyConfig.prototype.autoClose;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._overlayRef.detach()));\n                    }\n                }\n            }));\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._scrollSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = (/**\n         * @return {?}\n         */\n        () => new NoopScrollStrategy());\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config));\n        /**\n         * Block scrolling.\n         */\n        this.block = (/**\n         * @return {?}\n         */\n        () => new BlockScrollStrategy(this._viewportRuler, this._document));\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config));\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollStrategyOptions, factory: function (t) { return ScrollStrategyOptions.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._document;\n    /**\n     * Do nothing on scroll.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.noop;\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * \\@param config Configuration to be used inside the scroll strategy.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.close;\n    /**\n     * Block scrolling.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.block;\n    /**\n     * Update the overlay's position on scroll.\n     * \\@param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.reposition;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            /** @type {?} */\n            const configKeys = (/** @type {?} */ (Object.keys(config)));\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = (/** @type {?} */ (config[key]));\n                }\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * Strategy with which to position the overlay.\n     * @type {?}\n     */\n    OverlayConfig.prototype.positionStrategy;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     * @type {?}\n     */\n    OverlayConfig.prototype.scrollStrategy;\n    /**\n     * Custom class to add to the overlay pane.\n     * @type {?}\n     */\n    OverlayConfig.prototype.panelClass;\n    /**\n     * Whether the overlay has a backdrop.\n     * @type {?}\n     */\n    OverlayConfig.prototype.hasBackdrop;\n    /**\n     * Custom class to add to the backdrop\n     * @type {?}\n     */\n    OverlayConfig.prototype.backdropClass;\n    /**\n     * The width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.width;\n    /**\n     * The height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.height;\n    /**\n     * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.minWidth;\n    /**\n     * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.minHeight;\n    /**\n     * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.maxWidth;\n    /**\n     * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.maxHeight;\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     * @type {?}\n     */\n    OverlayConfig.prototype.direction;\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    OverlayConfig.prototype.disposeOnNavigation;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A connection point on the origin element.\n * @record\n */\nfunction OriginConnectionPosition() { }\nif (false) {\n    /** @type {?} */\n    OriginConnectionPosition.prototype.originX;\n    /** @type {?} */\n    OriginConnectionPosition.prototype.originY;\n}\n/**\n * A connection point on the overlay element.\n * @record\n */\nfunction OverlayConnectionPosition() { }\nif (false) {\n    /** @type {?} */\n    OverlayConnectionPosition.prototype.overlayX;\n    /** @type {?} */\n    OverlayConnectionPosition.prototype.overlayY;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\nif (false) {\n    /**\n     * X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.originX;\n    /**\n     * Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.originY;\n    /**\n     * X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.overlayX;\n    /**\n     * Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.overlayY;\n    /**\n     * Offset along the X axis.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.offsetX;\n    /**\n     * Offset along the Y axis.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.offsetY;\n    /**\n     * Class(es) to be applied to the panel while this position is active.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.panelClass;\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\nif (false) {\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOriginClipped;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOriginOutsideView;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOverlayClipped;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOverlayOutsideView;\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\nif (false) {\n    /**\n     * The position used as a result of this change.\n     * @type {?}\n     */\n    ConnectedOverlayPositionChange.prototype.connectionPair;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    ConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        });\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayKeyboardDispatcher, factory: function (t) { return OverlayKeyboardDispatcher.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Currently attached overlays in the order they were attached.\n     * @type {?}\n     */\n    OverlayKeyboardDispatcher.prototype._attachedOverlays;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._isAttached;\n    /**\n     * Keyboard event listener that will be attached to the body.\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._keydownListener;\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        (/** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const containerClass = 'cdk-overlay-container';\n        /** @type {?} */\n        const previousContainers = this._document.getElementsByClassName(containerClass);\n        // Remove any old containers. This can happen when transitioning from the server to the client.\n        for (let i = 0; i < previousContainers.length; i++) {\n            (/** @type {?} */ (previousContainers[i].parentNode)).removeChild(previousContainers[i]);\n        }\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayContainer, factory: function (t) { return OverlayContainer.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._containerElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._document;\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => this._backdropClick.next(event));\n        this._keydownEventsObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            });\n        }));\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        }));\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe((/**\n             * @return {?}\n             */\n            () => this.dispose()));\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = (/** @type {?} */ (null));\n        }\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                }));\n            }));\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        /** @type {?} */\n        let timeoutId;\n        /** @type {?} */\n        let finishDetach = (/**\n         * @return {?}\n         */\n        () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses((/** @type {?} */ (backdropToDetach)), this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        });\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\n        }));\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => setTimeout(finishDetach, 500)));\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach((/**\n         * @param {?} cssClass\n         * @return {?}\n         */\n        cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        }));\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            }));\n        }));\n    }\n    /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n    _disposeScrollStrategy() {\n        /** @type {?} */\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropClick;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._attachments;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._detachments;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._positionStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._scrollStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._locationChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropClickHandler;\n    /**\n     * Reference to the parent of the `_host` at the time it was detached. Used to restore\n     * the `_host` to its original position in the DOM when it gets re-attached.\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._previousHostParent;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._keydownEventsObservable;\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     * @type {?}\n     */\n    OverlayRef.prototype._keydownEvents;\n    /**\n     * Amount of subscriptions to the keydown events.\n     * @type {?}\n     */\n    OverlayRef.prototype._keydownEventSubscriptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._portalOutlet;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._host;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._pane;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._keyboardDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._location;\n}\n/**\n * Size properties for an overlay.\n * @record\n */\nfunction OverlaySizeConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.width;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.height;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.minWidth;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.minHeight;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.maxWidth;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.maxHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this._scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        }));\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        /** @type {?} */\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            })));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    withScrollableContainers(scrollables) {\n        (/** @type {?} */ (this))._scrollables = scrollables;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\n            (/** @type {?} */ (this))._lastPosition = null;\n        }\n        (/** @type {?} */ (this))._validatePositions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    withViewportMargin(margin) {\n        (/** @type {?} */ (this))._viewportMargin = margin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    withPush(canPush = true) {\n        (/** @type {?} */ (this))._canPush = canPush;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked = true) {\n        (/** @type {?} */ (this))._positionLocked = isLocked;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetX(offset) {\n        (/** @type {?} */ (this))._offsetX = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetY(offset) {\n        (/** @type {?} */ (this))._offsetY = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    withTransformOriginOn(selector) {\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        })));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, (/** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        })));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ top: null, bottom: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            /** @type {?} */\n            const documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ left: null, right: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        /** @type {?} */\n        const originBounds = this._getOriginRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        /** @type {?} */\n        const scrollContainerBounds = this._scrollables.map((/**\n         * @param {?} scrollable\n         * @return {?}\n         */\n        scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        }));\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from its length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((/**\n         * @param {?} currentValue\n         * @param {?} currentOverflow\n         * @return {?}\n         */\n        (currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }), length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        /** @type {?} */\n        const width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((/**\n         * @param {?} pair\n         * @return {?}\n         */\n        pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        }));\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            }));\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                this._pane.classList.remove(cssClass);\n            }));\n            this._appliedPanelClasses = [];\n        }\n    }\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    _getOriginRect() {\n        /** @type {?} */\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        if (origin instanceof HTMLElement) {\n            return origin.getBoundingClientRect();\n        }\n        /** @type {?} */\n        const width = origin.width || 0;\n        /** @type {?} */\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\nif (false) {\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayRef;\n    /**\n     * Whether we're performing the very first positioning of the overlay.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isInitialRender;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._lastBoundingBoxSize;\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isPushed;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._canPush;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._growAfterOpen;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasFlexibleDimensions;\n    /**\n     * Whether the overlay position is locked.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._positionLocked;\n    /**\n     * Cached origin dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._originRect;\n    /**\n     * Cached overlay dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayRect;\n    /**\n     * Cached viewport dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportRect;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportMargin;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._scrollables;\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @type {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._preferredPositions;\n    /**\n     * The origin element against which the overlay will be positioned.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._origin;\n    /**\n     * The overlay pane element.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._pane;\n    /**\n     * Whether the strategy has been disposed of already.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isDisposed;\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._boundingBox;\n    /**\n     * The last position to have been calculated as the best fit position.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._lastPosition;\n    /**\n     * Subject that emits whenever the position changes.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._positionChanges;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._resizeSubscription;\n    /**\n     * Default offset for the overlay along the x axis.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._offsetX;\n    /**\n     * Default offset for the overlay along the y axis.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._offsetY;\n    /**\n     * Selector to be used when finding the elements on which to set the transform origin.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._transformOriginSelector;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._appliedPanelClasses;\n    /**\n     * Amount by which the overlay was pushed in each axis during the last time it was positioned.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._previousPushAmount;\n    /**\n     * Observable sequence of position changes.\n     * @type {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.positionChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayContainer;\n}\n/**\n * A simple (x, y) coordinate.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Record of measurements for how an overlay (at a given position) fits into the viewport.\n * @record\n */\nfunction OverlayFit() { }\nif (false) {\n    /**\n     * Whether the overlay fits completely in the viewport.\n     * @type {?}\n     */\n    OverlayFit.prototype.isCompletelyWithinViewport;\n    /**\n     * Whether the overlay fits in the viewport on the y-axis.\n     * @type {?}\n     */\n    OverlayFit.prototype.fitsInViewportVertically;\n    /**\n     * Whether the overlay fits in the viewport on the x-axis.\n     * @type {?}\n     */\n    OverlayFit.prototype.fitsInViewportHorizontally;\n    /**\n     * The total visible area (in px^2) of the overlay inside the viewport.\n     * @type {?}\n     */\n    OverlayFit.prototype.visibleArea;\n}\n/**\n * Record of the measurments determining whether an overlay will fit in a specific position.\n * @record\n */\nfunction FallbackPosition() { }\nif (false) {\n    /** @type {?} */\n    FallbackPosition.prototype.position;\n    /** @type {?} */\n    FallbackPosition.prototype.originPoint;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayPoint;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayFit;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayRect;\n}\n/**\n * Position and size of the overlay sizing wrapper for a specific position.\n * @record\n */\nfunction BoundingBoxRect() { }\nif (false) {\n    /** @type {?} */\n    BoundingBoxRect.prototype.top;\n    /** @type {?} */\n    BoundingBoxRect.prototype.left;\n    /** @type {?} */\n    BoundingBoxRect.prototype.bottom;\n    /** @type {?} */\n    BoundingBoxRect.prototype.right;\n    /** @type {?} */\n    BoundingBoxRect.prototype.height;\n    /** @type {?} */\n    BoundingBoxRect.prototype.width;\n}\n/**\n * Record of measures determining how well a given position will fit with flexible dimensions.\n * @record\n */\nfunction FlexibleFit() { }\nif (false) {\n    /** @type {?} */\n    FlexibleFit.prototype.position;\n    /** @type {?} */\n    FlexibleFit.prototype.origin;\n    /** @type {?} */\n    FlexibleFit.prototype.overlayRect;\n    /** @type {?} */\n    FlexibleFit.prototype.boundingBoxRect;\n}\n/**\n * A connected position as specified by the user.\n * @record\n */\nfunction ConnectedPosition() { }\nif (false) {\n    /** @type {?} */\n    ConnectedPosition.prototype.originX;\n    /** @type {?} */\n    ConnectedPosition.prototype.originY;\n    /** @type {?} */\n    ConnectedPosition.prototype.overlayX;\n    /** @type {?} */\n    ConnectedPosition.prototype.overlayY;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.weight;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.offsetX;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.offsetY;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.panelClass;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?} platform\n     * @param {?} overlayContainer\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        (/** @type {?} */ (this))._preferredPositions.push(position);\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\n        }\n        else {\n            (/** @type {?} */ (this))._direction = dir;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withOffsetX(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withOffsetY(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked) {\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\n        return (/** @type {?} */ (this));\n    }\n}\nif (false) {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * \\@docs-private\n     * @type {?}\n     */\n    ConnectedPositionStrategy.prototype._positionStrategy;\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    ConnectedPositionStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ConnectedPositionStrategy.prototype._direction;\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @type {?}\n     */\n    ConnectedPositionStrategy.prototype._preferredPositions;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    top(value = '') {\n        (/** @type {?} */ (this))._bottomOffset = '';\n        (/** @type {?} */ (this))._topOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    left(value = '') {\n        (/** @type {?} */ (this))._rightOffset = '';\n        (/** @type {?} */ (this))._leftOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    bottom(value = '') {\n        (/** @type {?} */ (this))._topOffset = '';\n        (/** @type {?} */ (this))._bottomOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    right(value = '') {\n        (/** @type {?} */ (this))._leftOffset = '';\n        (/** @type {?} */ (this))._rightOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    width(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\n        }\n        else {\n            (/** @type {?} */ (this))._width = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    height(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\n        }\n        else {\n            (/** @type {?} */ (this))._height = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    centerHorizontally(offset = '') {\n        (/** @type {?} */ (this)).left(offset);\n        (/** @type {?} */ (this))._justifyContent = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    centerVertically(offset = '') {\n        (/** @type {?} */ (this)).top(offset);\n        (/** @type {?} */ (this))._alignItems = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n}\nif (false) {\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._cssPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._topOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._bottomOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._leftOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._rightOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._alignItems;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._justifyContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._width;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._height;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._isDisposed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayPositionBuilder, factory: function (t) { return OverlayPositionBuilder.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._overlayContainer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Next overlay unique ID.\n * @type {?}\n */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: function (t) { return Overlay.ɵfac(t); }, providedIn: null });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._appRef;\n    /**\n     * Scrolling strategies that can be used when creating an overlay.\n     * @type {?}\n     */\n    Overlay.prototype.scrollStrategies;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._overlayContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._positionBuilder;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._keyboardDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._directionality;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._location;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @param {?=} config\n     * @return {?}\n     */\n    (config) => overlay.scrollStrategies.reposition(config));\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    CdkOverlayOrigin.prototype.elementRef;\n}\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        }));\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map((/**\n         * @param {?} currentPosition\n         * @return {?}\n         */\n        currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        })));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => this.positionChange.emit(p)));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.backdropClick.emit(event);\n            }));\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._templatePortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._hasBackdrop;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._lockPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._growAfterOpen;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._flexibleDimensions;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._push;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._backdropSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._offsetX;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._offsetY;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._scrollStrategyFactory;\n    /**\n     * Origin for the connected overlay.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.origin;\n    /**\n     * Registered connected position pairs.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positions;\n    /**\n     * The width of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.width;\n    /**\n     * The height of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.height;\n    /**\n     * The min width of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.minWidth;\n    /**\n     * The min height of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.minHeight;\n    /**\n     * The custom class to be set on the backdrop element.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.backdropClass;\n    /**\n     * The custom class to add to the overlay pane element.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.panelClass;\n    /**\n     * Margin between the overlay and the viewport edges.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.viewportMargin;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.scrollStrategy;\n    /**\n     * Whether the overlay is open.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.open;\n    /**\n     * Event emitted when the backdrop is clicked.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.backdropClick;\n    /**\n     * Event emitted when the position has changed.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positionChange;\n    /**\n     * Event emitted when the overlay has been attached.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.attach;\n    /**\n     * Event emitted when the overlay has been detached.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.detach;\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.overlayKeydown;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._dir;\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule],\n        ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin,\n        ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener((/**\n         * @return {?}\n         */\n        () => this._adjustParentForFullscreenChange()));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            /** @type {?} */\n            const _document = (/** @type {?} */ (this._document));\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        /** @type {?} */\n        const _document = (/** @type {?} */ (this._document));\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nFullscreenOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FullscreenOverlayContainer, factory: function (t) { return FullscreenOverlayContainer.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FullscreenOverlayContainer.prototype._fullScreenEventName;\n    /**\n     * @type {?}\n     * @private\n     */\n    FullscreenOverlayContainer.prototype._fullScreenListener;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_c, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_e, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_d, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy };\n\n//# sourceMappingURL=overlay.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { NgModule, Injectable, ɵɵdefineInjectable, ɵɵinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MediaMatcher, factory: function (t) { return MediaMatcher.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\nif (false) {\n    /**\n     * The internal matchMedia method to return back a MediaQueryList like object.\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._matchMedia;\n    /**\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._platform;\n}\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            (/** @type {?} */ (document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            ((/** @type {?} */ (mediaQueryStyleNode.sheet)))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => { }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => { })\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction BreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    BreakpointState.prototype.matches;\n    /**\n     * A key boolean pair for each query provided to the observe method,\n     * with its current matched state.\n     * @type {?}\n     */\n    BreakpointState.prototype.breakpoints;\n}\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction InternalBreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.matches;\n    /**\n     * The media query being to be matched\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.query;\n}\n/**\n * @record\n */\nfunction Query() { }\nif (false) {\n    /** @type {?} */\n    Query.prototype.observable;\n    /** @type {?} */\n    Query.prototype.mql;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} _mediaMatcher\n     * @param {?} _zone\n     */\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some((/**\n         * @param {?} mediaQuery\n         * @return {?}\n         */\n        mediaQuery => this._registerQuery(mediaQuery).mql.matches));\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => this._registerQuery(query).observable));\n        /** @type {?} */\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map((/**\n         * @param {?} breakpointStates\n         * @return {?}\n         */\n        (breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((/**\n             * @param {?} state\n             * @return {?}\n             */\n            (state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            }));\n            return response;\n        })));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return (/** @type {?} */ (this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        /** @type {?} */\n        const queryObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            /** @type {?} */\n            const handler = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this._zone.run((/**\n             * @return {?}\n             */\n            () => observer.next(e))));\n            mql.addListener(handler);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mql.removeListener(handler);\n            });\n        })).pipe(startWith(mql), map((/**\n         * @param {?} nextMql\n         * @return {?}\n         */\n        (nextMql) => ({ query, matches: nextMql.matches }))), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BreakpointObserver, factory: function (t) { return BreakpointObserver.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.ngInjectableDef = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\nif (false) {\n    /**\n     * A map of all media queries currently being listened for.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._queries;\n    /**\n     * A subject for all other observables to takeUntil based on.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._destroySubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._mediaMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._zone;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, TemplateRef, Injectable, Injector, Optional, SkipSelf, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event that is emitted when a snack bar is dismissed.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nconst _c0 = [1, \"mat-simple-snackbar\"];\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r11.data.action);\n} }\nconst _c1 = [1, \"mat-snack-bar-container\"];\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nfunction MatSnackBarDismiss() { }\nif (false) {\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     * @type {?}\n     */\n    MatSnackBarDismiss.prototype.dismissedByAction;\n}\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nif (false) {\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @type {?}\n     */\n    MatSnackBarRef.prototype.instance;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatSnackBarRef.prototype.containerInstance;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._afterDismissed;\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._onAction;\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._durationTimeoutId;\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._dismissedByAction;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._overlayRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\nif (false) {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.politeness;\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.announcementMessage;\n    /**\n     * The view container to place the overlay for the snack bar into.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.viewContainerRef;\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.duration;\n    /**\n     * Extra CSS classes to be added to the snack bar container.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.panelClass;\n    /**\n     * Text layout direction for the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.direction;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.data;\n    /**\n     * The horizontal position to place the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.horizontalPosition;\n    /**\n     * The vertical position to place the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.verticalPosition;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostBindings: function SimpleSnackBar_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵelementHostAttrs(_c0);\n    } }, decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}/*# sourceMappingURL=simple-snack-bar.css.map */\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                moduleId: module.id,\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}/*# sourceMappingURL=simple-snack-bar.css.map */\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Data that was injected into the snack bar.\n     * @type {?}\n     */\n    SimpleSnackBar.prototype.data;\n    /** @type {?} */\n    SimpleSnackBar.prototype.snackBarRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(2);\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n        ɵngcc0.ɵɵelementHostAttrs(_c1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media(-ms-high-contrast: active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}/*# sourceMappingURL=snack-bar-container.css.map */\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                moduleId: module.id,\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media(-ms-high-contrast: active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}/*# sourceMappingURL=snack-bar-container.css.map */\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * Whether the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._destroyed;\n    /**\n     * The portal outlet inside of this container into which the snack bar content will be loaded.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._portalOutlet;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._onExit;\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._onEnter;\n    /**\n     * The state of the snack bar animations.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._animationState;\n    /**\n     * ARIA role for the snack bar container.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._role;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._changeDetectorRef;\n    /**\n     * The snack bar configuration.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype.snackBarConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer,\n        SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatSnackBar, factory: function (t) { return MatSnackBar.ɵfac(t); }, providedIn: MatSnackBarModule });\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._snackBarRefAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._live;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._breakpointObserver;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._parentSnackBar;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._defaultConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import { Injectable } from '@angular/core';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { from } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/shared/logger.service\";\n/**\n * Wrapper around the prettify.js library\n */\nexport class PrettyPrinter {\n    constructor(logger) {\n        this.logger = logger;\n        this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n    }\n    getPrettyPrintOne() {\n        const ppo = window['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n            // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n            // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n            import('assets/js/prettify.js')\n                .then(() => window['prettyPrintOne'], err => {\n                const msg = `Cannot get prettify.js from server: ${err.message}`;\n                this.logger.error(new Error(msg));\n                // return a pretty print fn that always fails.\n                return () => { throw new Error(msg); };\n            });\n    }\n    /**\n     * Format code snippet as HTML\n     * @param {string} code - the code snippet to format; should already be HTML encoded\n     * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n     * @param {string|number} [linenums] - Whether to display line numbers:\n     *  - false: don't display\n     *  - true: do display\n     *  - number: do display but start at the given number\n     * @returns Observable<string> - Observable of formatted code\n     */\n    formatCode(code, language, linenums) {\n        return this.prettyPrintOne.pipe(map(ppo => {\n            try {\n                return ppo(code, language, linenums);\n            }\n            catch (err) {\n                const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n                console.error(msg, err);\n                throw new Error(msg);\n            }\n        }), first());\n    }\n}\nPrettyPrinter.ɵfac = function PrettyPrinter_Factory(t) { return new (t || PrettyPrinter)(i0.ɵɵinject(i1.Logger)); };\nPrettyPrinter.ɵprov = i0.ɵɵdefineInjectable({ token: PrettyPrinter, factory: function (t) { return PrettyPrinter.ɵfac(t); }, providedIn: null });\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PrettyPrinter, [{\n        type: Injectable\n    }], function () { return [{ type: i1.Logger }]; }, null); })();\n"]}