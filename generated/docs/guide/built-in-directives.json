{
  "id": "guide/built-in-directives",
  "title": "Built-in directives",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/built-in-directives.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"built-in-directives\" translation-result=\"on\">内置指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"built-in-directives\">Built-in directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 提供了两种内置指令<a href=\"guide/attribute-directives\"><em>属性型</em>指令</a>和<a href=\"guide/structural-directives\"><em>结构型</em>指令</a>。</p><p translation-origin=\"off\">Angular offers two kinds of built-in directives: <a href=\"guide/attribute-directives\"><em>attribute</em> directives</a> and <a href=\"guide/structural-directives\"><em>structural</em> directives</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要查看包含本指南中代码的可工作范例，请参阅<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<p translation-result=\"on\">欲知详情，包括如何构建你自己的自定义指令，请参阅<a href=\"guide/attribute-directives\">属性型指令</a>和<a href=\"guide/structural-directives\">结构型指令</a>。</p><p translation-origin=\"off\">For more detail, including how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n<hr>\n<a id=\"attribute-directives\"></a>\n<h2 id=\"built-in-attribute-directives\" translation-result=\"on\">内置属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"built-in-attribute-directives\">Built-in attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">属性型指令会监听并修改其它 HTML 元素和组件的行为、Attribute 和 Property。\n它们通常被应用在元素上，就好像它们是 HTML 属性一样，因此得名属性型指令。</p><p translation-origin=\"off\">Attribute directives listen to and modify the behavior of\nother HTML elements, attributes, properties, and components.\nYou usually apply them to elements as if they were HTML attributes, hence the name.</p>\n\n<p translation-result=\"on\">许多 NgModule（例如 <a href=\"guide/router\" title=\"路由和导航\"><code>RouterModule</code></a> 和 <a href=\"guide/forms\" title=\"表单\"><code>FormsModule</code></a> 都定义了自己的属性型指令。最常见的属性型指令如下：</p><p translation-origin=\"off\">Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a> —— 添加和删除一组 CSS 类。</p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a>—adds and removes a set of CSS classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngStyle\"><code>NgStyle</code></a> —— 添加和删除一组 HTML 样式。</p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#ngStyle\"><code>NgStyle</code></a>—adds and removes a set of HTML styles.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a> —— 将数据双向绑定添加到 HTML 表单元素。</p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a>—adds two-way data binding to an HTML form element.</p>\n\n</li>\n</ul>\n<hr>\n<a id=\"ngClass\"></a>\n<h2 id=\"ngclass\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngclass\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 同时添加或删除几个 CSS 类。</p><p translation-origin=\"off\">Add or remove several CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\" header=\"src/app/app.component.html\">\n&#x3C;!-- toggle the \"special\" class on/off with a property -->\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\">This div is special&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要添加或删除<em>单个</em>类，请使用<a href=\"guide/attribute-binding#class-binding\">类绑定</a>而不是 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>。</p><p translation-origin=\"off\">To add or remove a <em>single</em> class, use <a href=\"guide/attribute-binding#class-binding\">class binding</a> rather than <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>.</p>\n\n</div>\n<p translation-result=\"on\">考虑一个 <code>setCurrentClasses()</code> 组件方法，该方法设置一个组件属性 <code>currentClasses</code>，该对象具有一个根据其它三个组件属性的 <code>true</code> / <code>false</code> 状态来添加或删除三个 CSS 类的对象。该对象的每个键(key)都是一个 CSS 类名。如果要添加上该类，则其值为 <code>true</code>，反之则为 <code>false</code>。</p><p translation-origin=\"off\">Consider a <code>setCurrentClasses()</code> component method that sets a component property,\n<code>currentClasses</code>, with an object that adds or removes three classes based on the\n<code>true</code>/<code>false</code> state of three other component properties. Each key of the object is a CSS class name; its value is <code>true</code> if the class should be added,\n<code>false</code> if it should be removed.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\" header=\"src/app/app.component.ts\">\n  currentClasses: {};\n/* . . . */\n  setCurrentClasses() {\n    // CSS classes: added/removed per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component properties\n    this.currentClasses =  {\n      saveable: this.canSave,\n      modified: !this.isUnchanged,\n      special:  this.isSpecial\n    };\n  }\n\n</code-example>\n<p translation-result=\"on\">把 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 属性绑定到 <code>currentClasses</code>，根据它来设置此元素的 CSS 类：</p><p translation-origin=\"off\">Adding an <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> property binding to <code>currentClasses</code> sets the element's classes accordingly:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\">This div is initially saveable, unchanged, and special.&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">请记住，在这种情况下，你要在初始化时和它依赖的属性发生变化时调用 <code>setCurrentClasses()</code>。</p><p translation-origin=\"off\">Remember that in this situation you'd call <code>setCurrentClasses()</code>,\nboth initially and when the dependent properties change.</p>\n\n</div>\n<hr>\n<a id=\"ngStyle\"></a>\n<h2 id=\"ngstyle\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngstyle\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 根据组件的状态同时动态设置多个内联样式。</p><p translation-origin=\"off\">Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set many inline styles simultaneously and dynamically, based on the state of the component.</p>\n\n<h3 id=\"without-ngstyle\" translation-result=\"on\">不用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#without-ngstyle\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"without-ngstyle\">Without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#without-ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">有些情况下，要考虑使用<a href=\"guide/attribute-binding#style-binding\">样式绑定</a>来设置<em>单个</em>样式值，而不使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>。</p><p translation-origin=\"off\">For context, consider setting a <em>single</em> style value with <a href=\"guide/attribute-binding#style-binding\">style binding</a>, without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-ng-style\" header=\"src/app/app.component.html\">\n&#x3C;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">但是，如果要同时设置<em>多个</em>内联样式，请使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 指令。</p><p translation-origin=\"off\">However, to set <em>many</em> inline styles at the same time, use the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> directive.</p>\n\n<p translation-result=\"on\">下面的例子是一个 <code>setCurrentStyles()</code> 方法，它基于该组件另外三个属性的状态，用一个定义了三个样式的对象设置了 <code>currentStyles</code> 属性。</p><p translation-origin=\"off\">The following is a <code>setCurrentStyles()</code> method that sets a component\nproperty, <code>currentStyles</code>, with an object that defines three styles,\nbased on the state of three other component properties:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\" header=\"src/app/app.component.ts\">\n  currentStyles: {};\n/* . . . */\n  setCurrentStyles() {\n    // CSS styles: set per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component properties\n    this.currentStyles = {\n      'font-style':  this.canSave      ? 'italic' : 'normal',\n      'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n      'font-size':   this.isSpecial    ? '24px'   : '12px'\n    };\n  }\n\n</code-example>\n<p translation-result=\"on\">把 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 属性绑定到 <code>currentStyles</code>，来根据它设置此元素的样式：</p><p translation-origin=\"off\">Adding an <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> property binding to <code>currentStyles</code> sets the element's styles accordingly:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">请记住，无论是在初始时还是其依赖的属性发生变化时，都要调用 <code>setCurrentStyles()</code>。</p><p translation-origin=\"off\">Remember to call <code>setCurrentStyles()</code>, both initially and when the dependent properties change.</p>\n\n</div>\n<hr>\n<a id=\"ngModel\"></a>\n<h2 id=\"ngmodel-two-way-binding\" translation-result=\"on\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> ：双向绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"ngmodel-two-way-binding\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>: Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令允许你显示数据属性并在用户进行更改时更新该属性。这是一个例子：</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive allows you to display a data property and\nupdate that property when the user makes changes. Here's an example:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" header=\"src/app/app.component.html (NgModel example)\" region=\"NgModel-1\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<h3 id=\"import-formsmodule-to-use-ngmodel\" translation-result=\"on\">导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 以使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"import-formsmodule-to-use-ngmodel\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要想在双向数据绑定中使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令，必须先导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 并将其添加到 NgModule 的 <code>imports</code> 列表中。要了解关于 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 和 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的更多信息，参阅<a href=\"guide/forms#ngModel\">表单</a>一章。</p><p translation-origin=\"off\">Before using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive in a two-way data binding,\nyou must import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and add it to the NgModule's <code>imports</code> list.\nLearn more about the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> in <a href=\"guide/forms#ngModel\">Forms</a>.</p>\n\n<p translation-result=\"on\">记住，要导入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 才能让 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 可用，如下所示：</p><p translation-origin=\"off\">Remember to import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to make <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> available as follows:</p>\n\n<code-example path=\"built-in-directives/src/app/app.module.ts\" header=\"src/app/app.module.ts (FormsModule import)\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;--- import into the <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>\n  ],\n/* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n<p translation-result=\"on\">通过分别绑定到 <code>&#x3C;input></code> 元素的 <code>value</code> 属性和 <code>input</code> 事件，可以达到同样的效果：</p><p translation-origin=\"off\">You could achieve the same result with separate bindings to\nthe <code>&#x3C;input></code> element's  <code>value</code> property and <code>input</code> event:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-NgModel\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"without\">without <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>:&#x3C;/label>\n&#x3C;input [value]=\"currentItem.name\" (input)=\"currentItem.name=$event.target.value\" id=\"without\">\n\n</code-example>\n<p translation-result=\"on\">为了简化语法，<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令把技术细节隐藏在其输入属性 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 和输出属性 <code>ngModelChange</code> 的后面：</p><p translation-origin=\"off\">To streamline the syntax, the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive hides the details behind its own <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input and <code>ngModelChange</code> output properties:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModelChange\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-change\">(ngModelChange)=\"...name=$event\":&#x3C;/label>\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"currentItem.name=$event\" id=\"example-change\">\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 输入属性会设置该元素的值，并通过 <code>ngModelChange</code> 的输出属性来监听元素值的变化。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> data property sets the element's value property and the <code>ngModelChange</code> event property\nlistens for changes to the element's value.</p>\n\n<h3 id=\"ngmodel-and-value-accessors\" translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和值访问器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"ngmodel-and-value-accessors\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">这些技术细节是针对每种具体元素的，因此 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令仅适用于通过 <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a> 适配过这种协议的元素。Angular 已经为所有基本的 HTML 表单元素提供了<em>值访问器</em>，<a href=\"guide/forms\">表单</a>一章示范了如何绑定到它们。</p><p translation-origin=\"off\">The details are specific to each kind of element and therefore the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive only works for an element\nsupported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>\nthat adapts an element to this protocol.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements and the\n<a href=\"guide/forms\">Forms</a> guide shows how to bind to them.</p>\n\n<p translation-result=\"on\">在编写适当的值访问器之前，不能将 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 应用于非表单的原生元素或第三方自定义组件。欲知详情，参阅<a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>上的 API 文档。</p><p translation-origin=\"off\">You can't apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form native element or a\nthird-party custom component until you write a suitable value accessor. For more information, see\nthe API documentation on <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n\n<p translation-result=\"on\">你不一定非用为所编写的 Angular 组件提供值访问器，因为你还可以把值属性和事件属性命名为符合 Angular 的基本<a href=\"guide/two-way-binding\">双向绑定语法</a>的形式，并完全跳过 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。<a href=\"guide/two-way-binding\">双向绑定</a>部分的 <code>sizer</code> 是此技术的一个范例。</p><p translation-origin=\"off\">You don't need a value accessor for an Angular component that\nyou write because you can name the value and event properties\nto suit Angular's basic <a href=\"guide/two-way-binding\">two-way binding syntax</a>\nand skip <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> altogether.\nThe <code>sizer</code> in the\n<a href=\"guide/two-way-binding\">Two-way Binding</a> section is an example of this technique.</p>\n\n<p translation-result=\"on\">单独的 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 绑定是对绑定到元素的原生属性方式的一种改进，但你可以使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法来通过单个声明简化绑定：</p><p translation-origin=\"off\">Separate <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> bindings are an improvement over binding to the\nelement's native properties, but you can streamline the binding with a\nsingle declaration using the <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<p translation-result=\"on\">此 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 语法只能<em>设置</em>数据绑定属性。如果你要做得更多，可以编写扩展表单。例如，下面的代码将 <code>&#x3C;input></code> 值更改为大写：</p><p translation-origin=\"off\">This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only <em>set</em> a data-bound property.\nIf you need to do something more, you can write the expanded form;\nfor example, the following changes the <code>&#x3C;input></code> value to uppercase:</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\" header=\"src/app/app.component.html\">\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\">\n\n</code-example>\n<p translation-result=\"on\">这里是所有这些变体的动画，包括这个大写转换的版本：</p><p translation-origin=\"off\">Here are all variations in action, including the uppercase version:</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" alt=\"NgModel variations\" width=\"540\" height=\"264\">\n</div>\n<hr>\n<a id=\"structural-directives\"></a>\n<h2 id=\"built-in-structural-directives\" translation-result=\"on\">内置<em>结构型</em>指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"built-in-structural-directives\">Built-in <em>structural</em> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">结构型指令的职责是 HTML 布局。\n它们塑造或重塑 DOM 的<em>结构</em>，这通常是通过添加、移除和操纵它们所附加到的宿主元素来实现的。</p><p translation-origin=\"off\">Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating\nthe host elements to which they are attached.</p>\n\n<p translation-result=\"on\">本节会介绍常见的内置结构型指令：</p><p translation-origin=\"off\">This section is an introduction to the common built-in structural directives:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a> —— 从模板中创建或销毁子视图。</p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a>—conditionally creates or destroys subviews from the template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a> —— 为列表中的每个条目重复渲染一个节点。</p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a>—repeat a node for each item in a list.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a> —— 一组在备用视图之间切换的指令。</p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a>—a set of directives that switch among alternative views.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"guide/structural-directives\">结构型指令</a>一章涵盖了结构型指令的详细内容，它解释了以下内容：</p><p translation-origin=\"off\">The deep details of structural directives are covered in the\n<a href=\"guide/structural-directives\">Structural Directives</a> guide,\nwhich explains the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">  为什么<a href=\"guide/structural-directives#the-asterisk--prefix\">在要指令名称前加上星号（*）</a>。</p><p translation-origin=\"off\">Why you\n<a href=\"guide/structural-directives#the-asterisk--prefix\">prefix the directive name with an asterisk (*)</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  当指令没有合适的宿主元素时，使用 <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a> 对元素进行分组。</p><p translation-origin=\"off\">Using <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a>\nto group elements when there is no suitable host element for the directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 如何写自己的结构型指令。</p><p translation-origin=\"off\">How to write your own structural directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 为什么你<a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">只能往一个元素上应用一个结构型指令</a>。</p><p translation-origin=\"off\">Why you <a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">can only apply one structural directive</a> to an element.</p>\n\n</li>\n</ul>\n</div>\n<hr>\n<a id=\"ngIf\"></a>\n<h2 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngif\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">你可以通过将 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令应用在宿主元素上来从 DOM 中添加或删除元素。在此范例中，将指令绑定到了条件表达式，例如 <code>isActive</code>。</p><p translation-origin=\"off\">You can add or remove an element from the DOM by applying an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive to\na host element.\nBind the directive to a condition expression like <code>isActive</code> in this example.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">不要忘了 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的星号（<code>*</code>）。关于星号的更多信息，请参阅 <a href=\"guide/structural-directives\">结构型指令</a>中的<a href=\"guide/structural-directives#the-asterisk--prefix\">星号（*）前缀</a>部分。</p><p translation-origin=\"off\">Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n</div>\n<p translation-result=\"on\">当 <code>isActive</code> 表达式返回真值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 会把 <code>ItemDetailComponent</code> 添加到 DOM 中。当表达式为假值时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 将从 DOM 中删除 <code>ItemDetailComponent</code>，从而销毁该组件及其所有子组件。</p><p translation-origin=\"off\">When the <code>isActive</code> expression returns a truthy value, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> adds the\n<code>ItemDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes the <code>ItemDetailComponent</code>\nfrom the DOM, destroying that component and all of its sub-components.</p>\n\n<h3 id=\"showhide-vs-ngif\" translation-result=\"on\">显示/隐藏与 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"showhide-vs-ngif\">Show/hide vs. <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">隐藏元素与使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 删除元素不同。为了进行比较，下面的范例演示如何使用<a href=\"guide/attribute-binding#class-binding\">类</a>或<a href=\"guide/attribute-binding#style-binding\">样式</a>绑定来控制元素的可见性。</p><p translation-origin=\"off\">Hiding an element is different from removing it with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.\nFor comparison, the following example shows how to control\nthe visibility of an element with a\n<a href=\"guide/attribute-binding#class-binding\">class</a> or <a href=\"guide/attribute-binding#style-binding\">style</a> binding.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-3\" header=\"src/app/app.component.html\">\n&#x3C;!-- isSpecial is true -->\n&#x3C;div [class.hidden]=\"!isSpecial\">Show with class&#x3C;/div>\n&#x3C;div [class.hidden]=\"isSpecial\">Hide with class&#x3C;/div>\n\n&#x3C;p>ItemDetail is in the DOM but hidden&#x3C;/p>\n&#x3C;app-item-detail [class.hidden]=\"isSpecial\">&#x3C;/app-item-detail>\n\n&#x3C;div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n&#x3C;div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">隐藏元素时，该元素及其所有后代仍保留在 DOM 中。这些元素的所有组件都保留在内存中，Angular 会继续做变更检查。它可能会占用大量计算资源，并且会不必要地降低性能。</p><p translation-origin=\"off\">When you hide an element, that element and all of its descendants remain in the DOM.\nAll components for those elements stay in memory and\nAngular may continue to check for changes.\nYou could be holding onto considerable computing resources and degrading performance\nunnecessarily.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 工作方式有所不同。如果 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 为 <code>false</code>，则 Angular 将从 DOM 中删除该元素及其后代。这销毁了它们的组件，释放了资源，从而带来更好的用户体验。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> works differently. When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes the element and its descendants from the DOM.\nIt destroys their components, freeing up resources, which\nresults in a better user experience.</p>\n\n<p translation-result=\"on\">如果要隐藏大型组件树，请考虑使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 作为显示/隐藏的更有效替代方法。</p><p translation-origin=\"off\">If you are hiding large component trees, consider <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> as a more\nefficient alternative to showing/hiding.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">关于 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>ngIfElse</code> 的更多信息，请参阅 <a href=\"api/common/NgIf\">关于 NgIf 的 API 文档</a>。</p><p translation-origin=\"off\">For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>ngIfElse</code>, see the <a href=\"api/common/NgIf\">API documentation about NgIf</a>.</p>\n\n</div>\n<h3 id=\"guard-against-null\" translation-result=\"on\">防范空指针错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guard-against-null\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"guard-against-null\">Guard against null<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guard-against-null\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 另一个优点是你可以使用它来防范空指针错误。显示/隐藏就是最合适的极简用例，当你需要防范时，请改用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 代替。如果其中嵌套的表达式尝试访问 <code>null</code> 的属性，Angular 将引发错误。</p><p translation-origin=\"off\">Another advantage of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is that you can use it to guard against null. Show/hide\nis best suited for very simple use cases, so when you need a guard, opt instead for <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. Angular will throw an error if a nested expression tries to access a property of <code>null</code>.</p>\n\n<p translation-result=\"on\">下面的例子中 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 保护着两个 <code>&#x3C;div></code>。仅当存在 <code>currentCustomer</code> 时，才会显示 <code>currentCustomer</code> 名称。除非它为 <code>null</code> 否则不会显示 <code>nullCustomer</code>。</p><p translation-origin=\"off\">The following shows <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> guarding two <code>&#x3C;div></code>s.\nThe <code>currentCustomer</code> name appears only when there is a <code>currentCustomer</code>.\nThe <code>nullCustomer</code> will not be displayed as long as it is <code>null</code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\">Hello, {{currentCustomer.name}}&#x3C;/div>\n\n</code-example>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\">Hello, &#x3C;span>{{nullCustomer}}&#x3C;/span>&#x3C;/div>\n\n</code-example>\n<hr>\n<a id=\"ngFor\"></a>\n<h2 id=\"ngfor\"><code>NgFor</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\"><code>NgFor</code> 是一个重复器指令 —— 一种用来显示条目列表的方法。你定义了一个 HTML 块，该 HTML 块定义了应如何显示单个条目，然后告诉 Angular 以该块为模板来渲染列表中的每个条目。赋值给 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的文本是用来指导重复器工作过程的指令。</p><p translation-origin=\"off\"><code>NgFor</code> is a repeater directive—a way to present a list of items.\nYou define a block of HTML that defines how a single item should be displayed\nand then you tell Angular to use that block as a template for rendering each item in the list.\nThe text assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is the instruction that guides the repeater process.</p>\n\n<p translation-result=\"on\">以下范例显示了如何将 <code>NgFor</code> 应用于简单的 <code>&#x3C;div></code>。</p><p translation-origin=\"off\">The following example shows <code>NgFor</code> applied to a simple <code>&#x3C;div></code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">不要忘了 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的星号（<code>*</code>）。关于星号的更多信息，请参阅<a href=\"guide/structural-directives\">结构型指令</a>中的<a href=\"guide/structural-directives#the-asterisk--prefix\">星号（*）前缀</a>部分。</p><p translation-origin=\"off\">Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n</div>\n<p translation-result=\"on\">你还可以将 <code>NgFor</code> 应用于组件元素，如以下范例所示。</p><p translation-origin=\"off\">You can also apply an <code>NgFor</code> to a component element, as in the following example.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<a id=\"microsyntax\"></a>\n<div class=\"callout is-critical\">\n<header translation-result=\"on\">`*ngFor` 微语法</header><header translation-origin=\"off\">*ngFor microsyntax</header>\n\n<p translation-result=\"on\">赋值给 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的字符串不是<a href=\"guide/interpolation\">模板表达式</a>。而是一个<em>微语法</em> —— 由 Angular 解释的一种小型语言。字符串 <code>\"let item of items\"</code> 的意思是：</p><p translation-origin=\"off\">The string assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is not a <a href=\"guide/interpolation\">template expression</a>. Rather,\nit's a <em>microsyntax</em>—a little language of its own that Angular interprets.\nThe string <code>\"let item of items\"</code> means:</p>\n\n<blockquote>\n<p translation-result=\"on\"><em>将 <code>items</code> 数组中的每个条目存储在局部循环变量 <code>item</code> 中，并使其可用于每次迭代的模板 HTML 中。</em></p><p translation-origin=\"off\"><em>Take each item in the <code>items</code> array, store it in the local <code>item</code> looping variable, and\nmake it available to the templated HTML for each iteration.</em></p>\n\n</blockquote>\n<p translation-result=\"on\">Angular 将该指令转换为包裹着宿主元素的 <code>&#x3C;ng-template></code>，然后反复使用此模板为列表中的每个 <code>item</code> 创建一组新的元素和绑定。关于微语法的更多信息，请参阅<a href=\"guide/structural-directives#microsyntax\">结构型指令</a>一章。</p><p translation-origin=\"off\">Angular translates this instruction into an <code>&#x3C;ng-template></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code>item</code>\nin the list.\nFor more information about microsyntax, see the <a href=\"guide/structural-directives#microsyntax\">Structural Directives</a> guide.</p>\n\n</div>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h3 id=\"template-input-variables\" translation-result=\"on\">模板输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#template-input-variables\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"template-input-variables\">Template input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#template-input-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>item</code> 前面的 <code>let</code> 关键字创建了一个名为 <code>item</code> 的模板输入变量。<code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 指令迭代父组件的 <code>items</code> 属性所返回的 <code>items</code> 数组，并在每次迭代期间将 <code>item</code> 设置为该数组中的当前条目。</p><p translation-origin=\"off\">The <code>let</code> keyword before <code>item</code> creates a template input variable called <code>item</code>.\nThe <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive iterates over the <code>items</code> array returned by the parent component's <code>items</code> property\nand sets <code>item</code> to the current item from the array during each iteration.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的宿主元素及其后代中可引用 <code>item</code>，来访问该条目的属性。以下范例首先在插值中引用 <code>item</code>，然后把一个绑定表达式传入 <code>&#x3C;app-item-detail></code> 组件的 <code>item</code> 属性。</p><p translation-origin=\"off\">Reference <code>item</code> within the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> host element\nas well as within its descendants to access the item's properties.\nThe following example references <code>item</code> first in an interpolation\nand then passes in a binding to the <code>item</code> property of the <code>&#x3C;app-item-detail></code> component.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\" header=\"src/app/app.component.html\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n&#x3C;!-- . . . -->\n  &#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">关于模板输入变量的更多信息，请参阅<a href=\"guide/structural-directives#template-input-variable\">结构型指令</a>。</p><p translation-origin=\"off\">For more information about template input variables, see\n<a href=\"guide/structural-directives#template-input-variable\">Structural Directives</a>.</p>\n\n<h3 id=\"ngfor-with-index\" translation-result=\"on\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 与 <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"ngfor-with-index\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> with <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>NgFor</code> 指令上下文中的 <code>index</code> 属性在每次迭代中返回该条目的从零开始的索引。\n你可以在模板输入变量中捕获 <code>index</code>，并在模板中使用它。</p><p translation-origin=\"off\">The <code>index</code> property of the <code>NgFor</code> directive context\nreturns the zero-based index of the item in each iteration.\nYou can capture the <code>index</code> in a template input variable and use it in the template.</p>\n\n<p translation-result=\"on\">下面的例子在名为 <code>i</code> 的变量中捕获 <code>index</code>，并将其与条目名称一起显示。</p><p translation-origin=\"off\">The next example captures the <code>index</code> in a variable named <code>i</code> and displays it with the item name.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\">{{i + 1}} - {{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要学习更多的<em>类似 index</em> 的值，例如 <code>last</code>、<code>even</code> 和 <code>odd</code>，请参阅 <a href=\"api/common/NgForOf\">NgFor API 参考</a>。</p><p translation-origin=\"off\"><code>NgFor</code> is implemented by the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive. Read more about the other <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> context values such as <code>last</code>, <code>even</code>,\nand <code>odd</code> in the <a href=\"api/common/NgForOf\">NgForOf API reference</a>.</p>\n\n</div>\n<a id=\"trackBy\"></a>\n<h3 id=\"ngfor-with-trackby\" translation-result=\"on\">带 <code>trackBy</code> 的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"ngfor-with-trackby\">*ngFor with <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果将 <code>NgFor</code> 与大型列表一起使用，则对某个条目的较小更改（例如删除或添加一项）就会触发一系列 DOM 操作。\n例如，重新查询服务器可能会重置包含所有新条目对象的列表，即使先前已显示这些条目也是如此。在这种情况下，Angular 只能看到由新的对象引用组成的新列表，它别无选择，只能用所有新的 DOM 元素替换旧的 DOM 元素。</p><p translation-origin=\"off\">If you use <code>NgFor</code> with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</p>\n\n<p translation-result=\"on\">你可以使用 <code>trackBy</code> 来让它更加高效。向该组件添加一个方法，该方法返回 <code>NgFor</code> 应该跟踪的值。这个例子中，该值是英雄的 <code>id</code>。如果 <code>id</code> 已经被渲染，Angular 就会跟踪它，而不会重新向服务器查询相同的 <code>id</code>。</p><p translation-origin=\"off\">You can make this more efficient with <code>trackBy</code>.\nAdd a method to the component that returns the value <code>NgFor</code> should track.\nIn this case, that value is the hero's <code>id</code>. If the <code>id</code> has already been rendered,\nAngular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\" header=\"src/app/app.component.ts\">\ntrackByItems(index: number, item: Item): number { return item.id; }\n\n</code-example>\n<p translation-result=\"on\">在微语法表达式中，将 <code>trackBy</code> 设置为 <code>trackByItems()</code> 方法。</p><p translation-origin=\"off\">In the microsyntax expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\">\n  ({{item.id}}) {{item.name}}\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">这就是 <code>trackBy</code> 效果的说明。“Reset items” 将创建具有相同 <code>item.id</code> 的新条目。“Change ids” 将使用新的 <code>item.id</code> 创建新条目。</p><p translation-origin=\"off\">Here is an illustration of the <code>trackBy</code> effect.\n\"Reset items\" creates new items with the same <code>item.id</code>s.\n\"Change ids\" creates new items with new <code>item.id</code>s.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 如果没有 <code>trackBy</code>，这些按钮都会触发完全的 DOM 元素替换。</p><p translation-origin=\"off\">With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 有了 <code>trackBy</code>，则只有修改了 <code>id</code> 的按钮才会触发元素替换。</p><p translation-origin=\"off\">With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</p>\n\n</li>\n</ul>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" alt=\"Animation of trackBy\" width=\"492\" height=\"442\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">内置指令仅仅使用了公共 API。也就是说，它们没有用到任何其它指令无权访问的私有 API。</p><p translation-origin=\"off\">Built-in directives use only public APIs; that is,\nthey do not have special access to any private APIs that other directives can't access.</p>\n\n</div>\n<hr>\n<a id=\"ngSwitch\"></a>\n<h2 id=\"the-ngswitch-directives\" translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-ngswitch-directives\">The <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">NgSwitch 类似于 JavaScript <code>switch</code> 语句。它根据切换条件显示几个可能的元素中的一个。Angular 只会将选定的元素放入 DOM。</p><p translation-origin=\"off\">NgSwitch is like the JavaScript <code>switch</code> statement.\nIt displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.</p>\n\n<!-- API Flagged -->\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 实际上是三个协作指令的集合： <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>，<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>，如以下范例所示。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is actually a set of three, cooperating directives:\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> as in the following example.</p>\n\n<p> <code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\">\n  &#x3C;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\">&#x3C;/app-stout-item>\n  &#x3C;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\">&#x3C;/app-device-item>\n  &#x3C;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\">&#x3C;/app-lost-item>\n  &#x3C;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\">&#x3C;/app-best-item>\n&#x3C;!-- . . . -->\n  &#x3C;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\">&#x3C;/app-unknown-item>\n&#x3C;/div>\n\n</code-example></p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngswitch.gif\" alt=\"Animation of NgSwitch\" width=\"370\" height=\"256\">\n</div>\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是控制器指令。把它绑定到一个返回<em>开关值</em>的表达式，例如 <code>feature</code>。尽管此范例中的 <code>feature</code> 值是字符串，但开关值可以是任何类型。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is the controller directive. Bind it to an expression that returns\nthe <em>switch value</em>, such as <code>feature</code>. Though the <code>feature</code> value in this\nexample is a string, the switch value can be of any type.</p>\n\n<p translation-result=\"on\"><strong>绑定到 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong>。如果试图写成 <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code>，就会出现错误，因为 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是<em>属性型</em>指令，而不是<em>结构型</em>指令。它不会直接接触 DOM，而是会更改与之相伴的指令的行为。</p><p translation-origin=\"off\"><strong>Bind to <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong>. You'll get an error if you try to set <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> because\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is an <em>attribute</em> directive, not a <em>structural</em> directive.\nRather than touching the DOM directly, it changes the behavior of its companion directives.</p>\n\n<p translation-result=\"on\"><strong>绑定到 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code></strong>\n<code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 指令都是<em>结构型指令</em>，因为它们会从 DOM 中添加或移除元素。</p><p translation-origin=\"off\"><strong>Bind to <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code></strong>.\nThe <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> directives are <em>structural</em> directives\nbecause they add or remove elements from the DOM.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">  当 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 的绑定值等于开关值时，就将其元素添加到 DOM 中；否则从 DOM 中删除。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> adds its element to the DOM when its bound value equals the switch value and removes\nits bound value when it doesn't equal the switch value.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> 会在没有任何一个 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 被选中时把它所在的元素加入 DOM 中。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">开关指令对于添加和删除<em>组件元素</em>特别有用。本范例在 <code>item-switch.components.ts</code> 文件中定义的四个 <code>item</code> 组件之间切换。每个组件都有一个名叫 <code>item</code> 的<a href=\"guide/inputs-outputs\" title=\"输入属性\">输入属性</a>，它会绑定到父组件的 <code>currentItem</code>。</p><p translation-origin=\"off\">The switch directives are particularly useful for adding and removing <em>component elements</em>.\nThis example switches among four <code>item</code> components defined in the <code>item-switch.components.ts</code> file.\nEach component has an <code>item</code> <a href=\"guide/inputs-outputs#input\" title=\"Input property\">input property</a>\nwhich is bound to the <code>currentItem</code> of the parent component.</p>\n\n<p translation-result=\"on\">开关指令也同样适用于原生元素和 Web Component。\n比如，你可以把 <code>&#x3C;app-best-item></code> 分支替换为如下代码。</p><p translation-origin=\"off\">Switch directives work as well with native elements and web components too.\nFor example, you could replace the <code>&#x3C;app-best-item></code> switch case with the following.</p>\n\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"> Are you as bright as {{currentItem.name}}?&#x3C;/div>\n\n</code-example>\n<hr>\n\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/attribute-directives\n - guide/event-binding\n - guide/example-apps-list\n - guide/glossary\n - guide/interpolation\n - guide/structural-directives\n - guide/template-reference-variables\n - guide/template-statements\n - guide/template-syntax\n - guide/two-way-binding\n - guide/upgrade\n - tutorial/toh-pt2\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/animations/style\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/NgModule\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/attribute-binding#class-binding\n - guide/attribute-binding#style-binding\n - guide/attribute-directives\n - guide/built-in-directives#built-in-attribute-directives\n - guide/built-in-directives#built-in-directives\n - guide/built-in-directives#built-in-structural-directives\n - guide/built-in-directives#guard-against-null\n - guide/built-in-directives#import-formsmodule-to-use-ngmodel\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngModel\n - guide/built-in-directives#ngStyle\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngclass\n - guide/built-in-directives#ngfor\n - guide/built-in-directives#ngfor-with-index\n - guide/built-in-directives#ngfor-with-trackby\n - guide/built-in-directives#ngif\n - guide/built-in-directives#ngmodel-and-value-accessors\n - guide/built-in-directives#ngmodel-two-way-binding\n - guide/built-in-directives#ngstyle\n - guide/built-in-directives#showhide-vs-ngif\n - guide/built-in-directives#template-input-variables\n - guide/built-in-directives#the-ngswitch-directives\n - guide/built-in-directives#without-ngstyle\n - guide/forms\n - guide/forms#ngModel\n - guide/inputs-outputs\n - guide/inputs-outputs#input\n - guide/interpolation\n - guide/router\n - guide/structural-directives\n - guide/structural-directives#microsyntax\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#one-per-element\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#the-asterisk--prefix\n - guide/two-way-binding\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/built-in-directives.md?message=docs%3A%20请简述你的修改...\n-->"
}